name: Build and Test (Production)

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    env:
      YTCLIPPER_YT_DLP_PROXY: ${{ secrets.YTDLP_PROXY_URL }}
      YTCLIPPER_CLIP_CLEANUP_SCHEDULER_ENABLED: "false"
      YTCLIPPER_YT_DLP_EXTRACTOR_RETRIES: "1"
      YTCLIPPER_YT_DLP_USER_AGENT: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
      YTCLIPPER_YT_DLP_COOKIES_FILE: ${{ secrets.YTDLP_COOKIES_FILE }}
      GO_VERSION: "1.23" 
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 
        
      - name: Set Up Go
        uses: actions/setup-go@v5  
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true 
          
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            make \
            python3 \
            python3-pip \
            ffmpeg \
            google-chrome-stable
            
      - name: Install Python Dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade \
            yt-dlp \
            requests \
            curl_cffi \
            urllib3
            
      - name: Install Go Dependencies
        run: go mod tidy
        
      - name: Setup Anti-Bot Configuration
        run: |
          # Create dummy cookies file for CI
          mkdir -p cookies
          echo "# Dummy cookies for CI/CD - not for real authentication" > cookies/youtube_cookies.txt
          echo "# This file prevents cookie-related errors in tests" >> cookies/youtube_cookies.txt
        
      - name: Verify Dependencies
        run: |
          yt-dlp --version --print-python-info
          go version
          ffmpeg -version
          
      - name: Test YouTube Connectivity  
        run: |
          echo "Testing yt-dlp with anti-bot configuration..."
          echo "Testing direct connection (no proxy in CI)..."
          yt-dlp \
            --user-agent "$YTCLIPPER_YT_DLP_USER_AGENT" \
            --cookies "$YTCLIPPER_YT_DLP_COOKIES_FILE" \
            --proxy "$YTCLIPPER_YT_DLP_PROXY" \
            --extractor-retries 1 \
            --sleep-requests 1 \
            --simulate \
            https://www.youtube.com/watch?v=dQw4w9WgXcQ && echo "✅ YouTube connectivity test successful" || echo "❌ YouTube test failed - this is expected in CI, continuing with build"
          
          echo "Testing basic YouTube accessibility..."
          curl -I https://www.youtube.com || echo "Direct YouTube access failed - expected in some CI environments"
          
      - name: Start Server
        run: |
          nohup go run main.go > server.log 2>&1 &
          echo $! > server.pid
          
      - name: Wait for Server
        timeout-minutes: 1
        run: |
          echo "Waiting for server to start..."
          for i in {1..20}; do
            if curl -s http://localhost:8080/health; then
              echo "Server is up!"
              exit 0
            fi
            echo "Attempt $i: Server not ready, waiting..."
            sleep 3
          done
          echo "Server failed to start"
          exit 1
          
      - name: Run E2E Tests
        id: e2e_tests
        timeout-minutes: 5
        run: go run -v test/e2e.go
        
      - name: Output Server Logs
        if: always()  # Run even if previous steps failed
        run: |
          echo "=== Server Logs ==="
          cat server.log
          
      - name: Stop Server
        if: always()  # Run even if previous steps failed
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi
          
      - name: Build Production
        run: make build-prod
        
      - name: Deploy to CapRover
        if: success() && github.ref == 'refs/heads/main' 
        run: |
          curl -X POST \
            "https://captain.mormor.online/api/v2/user/apps/webhooks/triggerbuild?namespace=captain&token=${{ secrets.CAPROVER_WEBHOOK_TOKEN }}" \
            -H "Content-Type: application/json"